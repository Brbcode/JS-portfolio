$sass-flexbox-rename-map: (nowrap: none, auto: auto, flex-start: start, flex-end: end, center: center, baseline: baseline, space-between: space-between, space-around: space-around, stretch: stretch, inherit: inherit);

@mixin flex($direction: none){
    display: -webkit-box;
	display: -moz-box;
	display: -webkit-flexbox;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
    @if($direction!=none){
        @include flex-direction($direction);
    }
}

@mixin inline-flex($direction: none){
    display: -webkit-inline-flex;
    display: inline-flex;
}
	
%flex{
  @include flex;
}

%inline-flex{
  @include inline-flex;
}

$flex-direction-args: (row, row-reverse, column, column-reverse, inherit);
@mixin flex-direction($direction: row){
  @if(not index($flex-direction-args, $direction)){
    @error "flex-direction has been passed an invalid argument: #{$direction}";
  }

  $reverse: false;
  @if (index((row-reverse, column-reverse), $direction)){
    $reverse: true;
  }
    
  $orientation: inherit;
  @if(index((row, row-reverse), $direction)){
    $orientation: horizontal;
  }    

  @if(index((column, column-reverse), $direction)){
    $orientation: vertical;
  }

  -webkit-box-orient: $orientation;
  -moz-box-orient: $orientation;
  @if($reverse){
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
  }    

  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

@each $arg in $flex-direction-args{
	%flex-#{$arg}{
    @include flex-direction($arg)
  }		
} 
	
$flex-wrap-args: (nowrap, wrap, wrap-reverse, inherit);
@mixin flex-wrap($wrap: nowrap){
  @if not index($flex-wrap-args, $wrap){
    @error "flex-wrap has been passed an invalid argument: #{$wrap}";
  }
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: map-get($sass-flexbox-rename-map, $wrap);
  flex-wrap: $wrap;
}
	
@each $arg in $flex-wrap-args{
	%flex-#{$arg}{
    @include flex-wrap($arg)
  }		
} 

@mixin order($order: 0){
  -webkit-box-ordinal-group: ($order + 1);
	-moz-box-ordinal-group: $order;
	-ms-flex-order: $order;
	-webkit-order: $order;
	-moz-order: $order;
	order: $order;
}
	
@mixin flex-grow($grow: 0){	
  -webkit-flex-grow: $grow;
	-webkit-box-flex: $grow;
	-moz-flex-grow: $grow;
	-ms-flex-positive: $grow;
	flex-grow: $grow;
}

@mixin flex-shrink($shrink: 1){
	-webkit-flex-shrink: $shrink;
	-webkit-box-flex: $shrink;
	-moz-flex-shrink: $shrink;
	-ms-flex-negative: $shrink;
	flex-shrink: $shrink;
}

@mixin flex-basis($basis: auto){
	-webkit-flex-basis: $basis;
	-moz-flex-basis: $basis;
	-ms-flex-preferred-size: $basis;
	flex-basis: $basis;
}

$justify-content-args: (flex-start, flex-end, center, space-between, space-around, space-evenly, inherit);
@mixin justify-content($justify: flex-start){
	@if (not index($justify-content-args, $justify)){
		@error "justify-content has been passed an invalid argument: #{$justify}";
  }
	@if($justify == space-between){
		-webkit-box-pack: justify;
		-moz-box-pack: justify;
		-webkit-flex-pack: justify;
		-ms-flex-pack: justify;
  }
	@else if ($justify != space-around){
		-webkit-box-pack: map-get($sass-flexbox-rename-map, $justify);
		-moz-box-pack: map-get($sass-flexbox-rename-map, $justify);
		-webkit-flex-pack: map-get($sass-flexbox-rename-map, $justify);
		-ms-flex-pack: map-get($sass-flexbox-rename-map, $justify);
  }
	-moz-justify-content: $justify;
	-webkit-justify-content: $justify;
	justify-content: $justify;
}

@each $arg in $justify-content-args{
	%justify-content-#{$arg}{
    @include justify-content($arg)
  }		
} 

$align-items-args: (flex-start, flex-end, center, baseline, stretch, inherit);
@mixin align-items($align: stretch){
	@if(not index($align-items-args, $align)){
		@error "align-items has been passed an invalid argument: #{$align}";
  }
	-webkit-box-align: map-get($sass-flexbox-rename-map, $align);
	-ms-flex-align: map-get($sass-flexbox-rename-map, $align);
	-webkit-align-items: $align;
	-moz-align-items: $align;
	align-items: $align;
}

@each $arg in $align-items-args{
	%align-items-#{$arg}{
    @include align-items($arg)
  }		
}   

$align-self-args: (auto, flex-start, flex-end, center, baseline, stretch, inherit);
@mixin align-self($align: auto){
	@if(not index($align-self-args, $align)){
		@error "align-self has been passed an invalid argument: #{$align}";
  }
	-ms-flex-item-align: map-get($sass-flexbox-rename-map, $align);
	-webkit-align-self: $align;
	-moz-align-self: $align;
	align-self: $align;
}

@each $arg in $align-self-args{
	%align-self-#{$arg}{
    @include align-self($arg)
  }		
}   


$align-content-args: (flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, inherit);
@mixin align-content($align: stretch){
	@if(not index($align-content-args, $align)){
		@error "align-content has been passed an invalid argument: #{$align}";
  }
	-ms-flex-line-pack: map-get($sass-flexbox-rename-map, $align);
	-webkit-align-content: $align;
	-moz-align-content: $align;
	align-content: $align;
} 

@each $arg in $align-content-args{
	%align-content-#{$arg}{
    @include align-content($arg)
  }		
}    